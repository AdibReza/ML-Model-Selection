# -*- coding: utf-8 -*-
"""Model selection on diabetes dst.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iLfOyxpBIneI7nTkjeeLnMO07rQzvdg1
"""

import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB

diabetes_data = pd.read_csv('/content/drive/MyDrive/ML datasets/Diabetics Prediction (SMV)/diabetes.csv')
diabetes_data.head()

diabetes_data.shape

diabetes_data.isnull().sum()

diabetes_data['Outcome'].value_counts()

x = diabetes_data.drop('Outcome', axis = 1)
y = diabetes_data['Outcome']

"""# Train Test Split"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, stratify = y, random_state = 1)

print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

models = [LogisticRegression(max_iter = 1000), KNeighborsClassifier(), RandomForestClassifier(), SVC(kernel = 'linear'), GaussianNB()]

def model_selection():
  for model in models:
    model.fit(x_train,y_train)
    training_prediction = model.predict(x_test)
    prediction = accuracy_score(y_test, training_prediction)
    print('Accuracy score of the ', model, ' = ', prediction)

model_selection()

"""## Cross validation"""

# Logistic Regression

cv_score_lr = cross_val_score(LogisticRegression(max_iter = 1000), x, y, cv = 5)
print(cv_score_lr)

mean_accuracy = sum(cv_score_lr)/len(cv_score_lr)
mean_accuracy = mean_accuracy * 100
mean_accuracy = round(mean_accuracy)
print(mean_accuracy,'%')

# SVC

cv_score_lr = cross_val_score(SVC(kernel ='linear'), x, y, cv = 5)
print(cv_score_lr)

mean_accuracy = sum(cv_score_lr)/len(cv_score_lr)
mean_accuracy = mean_accuracy * 100
mean_accuracy = round(mean_accuracy)
print(mean_accuracy,'%')

#Random Forest Classifier
cv_score_lr = cross_val_score(RandomForestClassifier(), x, y, cv = 5)
print(cv_score_lr)

mean_accuracy = sum(cv_score_lr)/len(cv_score_lr)
mean_accuracy = mean_accuracy * 100
mean_accuracy = round(mean_accuracy)
print(mean_accuracy,'%')

#Kneighbors

cv_score_lr = cross_val_score(KNeighborsClassifier(), x, y, cv = 5)
print(cv_score_lr)

mean_accuracy = sum(cv_score_lr)/len(cv_score_lr)
mean_accuracy = mean_accuracy * 100
mean_accuracy = round(mean_accuracy)
print(mean_accuracy,'%')

#naive bayes

cv_score_lr = cross_val_score(GaussianNB(), x, y, cv = 5)
print(cv_score_lr)

mean_accuracy = sum(cv_score_lr)/len(cv_score_lr)
mean_accuracy = mean_accuracy * 100
mean_accuracy = round(mean_accuracy)
print(mean_accuracy,'%')

"""# Creating a function for observing all the cross validation accuracies"""

def cross_validation():
  for model in models:
    cv_score_lr = cross_val_score(model, x, y, cv = 5)


    mean_accuracy = sum(cv_score_lr)/len(cv_score_lr)
    mean_accuracy = mean_accuracy * 100
    mean_accuracy = round(mean_accuracy)
    print('accuracy of',model, 'is', mean_accuracy,'%')

cross_validation()